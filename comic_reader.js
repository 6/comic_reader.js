// Generated by CoffeeScript 1.5.0
(function() {
  var ComicPage, ComicPages,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ComicPage = (function(_super) {

    __extends(ComicPage, _super);

    function ComicPage() {
      this.onImageLoad = __bind(this.onImageLoad, this);
      this.fetch = __bind(this.fetch, this);
      ComicPage.__super__.constructor.apply(this, arguments);
    }

    ComicPage.prototype.fetch = function() {
      var preloader;
      preloader = new ImagePreloader({
        urls: [this.get('url')],
        complete: this.onImageLoad
      });
      return preloader.start();
    };

    ComicPage.prototype.onImageLoad = function() {
      return this.set('fetched', true);
    };

    return ComicPage;

  })(Backbone.Model);

  ComicPages = (function(_super) {

    __extends(ComicPages, _super);

    function ComicPages() {
      this.fetch = __bind(this.fetch, this);
      ComicPages.__super__.constructor.apply(this, arguments);
    }

    ComicPages.prototype.model = ComicPage;

    ComicPages.prototype.fetch = function() {
      var _this = this;
      return _.map(this.models, function(model) {
        return model.fetch();
      });
    };

    return ComicPages;

  })(Backbone.Collection);

  this.ComicReader = (function(_super) {

    __extends(ComicReader, _super);

    function ComicReader() {
      this.previousPage = __bind(this.previousPage, this);
      this.nextPage = __bind(this.nextPage, this);
      this.showPage = __bind(this.showPage, this);
      this.onKeyPress = __bind(this.onKeyPress, this);
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      ComicReader.__super__.constructor.apply(this, arguments);
    }

    ComicReader.prototype.events = {
      'click .comic-page': 'nextPage'
    };

    ComicReader.prototype.initialize = function(options) {
      var modelAttributes,
        _this = this;
      if (options == null) {
        options = {};
      }
      $(document).on("keyup", this.onKeyPress);
      modelAttributes = _.map(options.urls || [], function(url) {
        return {
          url: url,
          fetched: false
        };
      });
      this.pages = new ComicPages(modelAttributes);
      this.render();
      this.pages.fetch();
      this.currentPageIndex = 0;
      if (this.pages.length > 0) {
        return this.showPage(this.currentPageIndex);
      }
    };

    ComicReader.prototype.render = function() {
      return this.$el.html(" <table class='comic-page-table' width=\"100%\" height=\"100%\" align=\"center\" valign=\"center\">\n  <tr>\n    <td class='comic-page-wrap'></td>\n  </tr>\n</table>");
    };

    ComicReader.prototype.onKeyPress = function(e) {
      if (e.keyCode === 37) {
        return this.previousPage();
      } else if (e.keyCode === 39) {
        return this.nextPage();
      }
    };

    ComicReader.prototype.showPage = function(pageIndex) {
      var page;
      this.currentPageIndex = pageIndex;
      page = this.pages.at(pageIndex);
      return this.$el.find(".comic-page-wrap").html("<img class='comic-page' src='" + (page.get('url')) + "'>");
    };

    ComicReader.prototype.nextPage = function() {
      if (this.currentPageIndex + 1 < this.pages.length) {
        return this.showPage(this.currentPageIndex + 1);
      }
    };

    ComicReader.prototype.previousPage = function() {
      if (this.currentPageIndex - 1 >= 0) {
        return this.showPage(this.currentPageIndex - 1);
      }
    };

    return ComicReader;

  })(Backbone.View);

}).call(this);
